# *****************************************************************************************
# Мы можем создать класс и описать определенные свойства. 
# Например если вы опишите свойство NumericProperty, 
# то вы сможете присваивать только числовые значения. 
# Если вы присвоете этому свойству строковое значение то будет ошибка. 
# Рассмотрим на примере создадим класс MyWidget
# который будет наследоваться от класса Widget с 
# модуля kivy.uix.widget и импортируем класс NumericProperty 
# из модуля kivy.properties(все классы свойств находятся в этом модуле). 
# Напишем код
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# свойства класса
# NumericProperty - числовое свойство
# BoundedNumericProperty - свойство где мы можем указать минимальное 
    # значение которые может быть присвоено(min) и максимальное(max).
from kivy.properties import NumericProperty, BoundedNumericProperty, OptionProperty
# Класс Widget (графический элемент)
from kivy.uix.widget import Widget
# *****************************************************************************************
class MyWidget(Widget):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    # В классе MyWidget мы создаем экземпляр класса NumericProperty п
    # од названием number и в качестве параметра указываем значение 4. 
    # Далее в классе PropertiesApp создаем экземпляр класса MyWidget и 
    # выводим значение number в консоли
    # ---------------------------------------------------------------------------
    number = NumericProperty(4)
    # ---------------------------------------------------------------------------
    # Импортируем класс BoundedNumericProperty и в классе MyWidget 
    # создаем экземпляр класса BoundedNumericProperty под названием 
    # number. В качестве параметров первое значение это значение 
    # по умолчанию, второе это минимальное значение, третье 
    # максимальное значение. Далее создаем экземпляр класса 
    # MyWidget в классе PropertiesApp и выводим на консоль максимальное 
    # значение. Сначало обращаемся к свойству number_min_max, далее вызываем 
    # метод get_max(для получения минимального значение get_min ) и 
    # в качестве параметра передаем наш экземляр класса MyWidget то 
    # есть my_widget. Запустим программу и увидем в консоли наше 
    # максимальное значение. Если вы попробуйте присвоить значение 
    # больше максимального или меньше минимального то консоль выведет ошибку
    number_min_max = BoundedNumericProperty(0, min=2, max=5)
    # ---------------------------------------------------------------------------
    option = OptionProperty('On', options=['On', 'Off'])
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# окно программы
class PropApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    def build(self):
        my_widget = MyWidget()
        print('my_widget.number: ', my_widget.number)
        # Теперь попробуем присвоить строковое значение переменной number и 
        # посмотрим что выведет консоль
        # my_widget.number = 'kivy'
        # ValueError: could not convert string to float: 'kivy'
        # Как видим у нас появилась ValueError так как переменная number 
        # у нас должно быть число
        print('my_widget.number_min_max: ', my_widget.number_min_max)
        print("my_widget.property('number_min_max').get_max(my_widget): ", 
                my_widget.property('number_min_max').get_max(my_widget))
        # Импортируем класс OptionProperty и создаем экземпляр этого класса 
        # в классе MyWidget. В качестве параметров он получает значение по 
        # умолчанию(в нашем случае 'On') и список опций options. 
        # Так же создаем экземпляр класса MyWidget в классе PropertiesApp и 
        # выводим option в консоль и там выведится значение по-умолчанию
        print('my_widget.option: ', my_widget.option)
        # У нас в атрибуте options есть еще опция 'Off'. Давайте присвоем 
        # её option и выведем в консоль
        my_widget.option = 'Off'
        print('my_widget.option: ', my_widget.option)
        # Если мы попробуем присвоить другое значение не из листа options 
        # то будет ошибка о том что мы должны выбрать опцию из списка options
        # my_widget.option = 'OtherValue'
        # ValueError: MyWidget.option is set to an invalid option 'OtherValue'. 
        # Must be one of: ['On', 'Off']
        return my_widget
    # ---------------------------------------------------------------------------
    # Рассмотрим какие свойства есть в Kivy:
    # NumericProperty - свойство чисел как целых(int) так и дробных(float)
    # StringProperty - свойство строк
    # ListProperty - свойство листа
    # DictProperty - свойство словаря
    # ObjectProperty - свойство объектов(очень хорошо используется когда 
        # мы создаем переменные в разметке. Смотрите страницу Атрибут id в 
        # разделе Kv Design Language
    # BooleanProperty - свойство булевых переменных(True или False)
    # BoundedNumericProperty - свойство где мы можем указать минимальное 
        # значение которые может быть присвоено(min) и максимальное(max).
    # OptionProperty - свойство выбора опции из доступных опций параметра 
        # options. Рассмотрим на примере.
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    PropApp().run()
# *****************************************************************************************
# *****************************************************************************************
# Простой чат
# *****************************************************************************************
# client.py - пользовательский интерфейс для общения в чате
# *****************************************************************************************
# Напишем простой чат. Напишем два файла python server.py и client.py.
# Файл server.py не будет иметь пользовательского интерфейса. 
# Это простой сервер который будет принимать подключения от клиентов и сообщения. 
# От клиента будет приходить сообщения на сервер а сервер перешлет 
# это сообщения всем подлкюченным клиентам.
# Файл client.py будет иметь пользовательский интерфейс который мы напишем на Kivy. 
# Мы будем использовать модуль socket. В server.py мы напишем сокет к которому 
# привяжем ip и port чтобы клиенту могли по этому ip и port подключаться. 
# Так же напишем чтобы сокет постоянно прослушивал входящие сообщения 
# от клиентов и отправлял их всем клиентам
# В client.py мы напишем чтобы сокет подключался по протоколу TCP и подключался 
# по тому ip и port который у сервера. И так же напишем чтобы этот же сокет 
# принимал сообщения от сервера и выводил их в Label с сообщениями. 
# Так же будут приходить от сервера сообщения кто подключился к чату 
# и кто вышел из чата
# Сначало напишем файл sever.py. 
# Импоритруем два модуля socket и threading
# *****************************************************************************************
# Теперь напишем файл client.py. В этом файле мы будем использовать Kivy. 
# Так же импортируем модули socket и threading
# *****************************************************************************************
# socket - работа с TCP/IP и сетью в целом
import socket
# threading - работа с потоками
import threading
# *****************************************************************************************
# Далее импортируем класс App и классы виджетов Kivy
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# коробочный макет
from kivy.uix.boxlayout import BoxLayout
# плавающий макет
from kivy.uix.floatlayout import FloatLayout
# текст
from kivy.uix.label import Label
# ввод текста
from kivy.uix.textinput import TextInput
# кнопка
from kivy.uix.button import Button
# *****************************************************************************************
# Далее импортируем из модуля graphics два класса Color и Rectangle. 
# Они нужны нам чтобы нарисовать прямоугольник заданного цвета.Мы будем рисовать 
# его где будет находиться Label со списком пользователей
# *****************************************************************************************
# импортируем класс Color (цвет) и Rectangle (прямоугольник).
# они нужны нам для того чтоы изменить цвет у области
# где будет Label списка пользователей
from kivy.graphics import Color, Rectangle
# *****************************************************************************************
# Импортируем виджет ScrollView для прокрутки Label c сообщениями. 
# Там же импортируем свойство для строк StringProperty
# *****************************************************************************************
# виджет для прокрутки
from kivy.uix.scrollview import ScrollView
# свойства объекта (виджета)
# ObjectProperty - свойство для оббъекта
# StringProrerty - свойство для строк
from kivy.properties import ObjectProperty, StringProrerty
# *****************************************************************************************
# И так же испортируем класс Builder из модуля lang для разметки 
# прокручиваемого Label с сообщениями
# *****************************************************************************************
# Работа с директориями и файлами ОС
from os.path import dirname, join
# Работа с директориями и файлами ОС
from pathlib import Path
# Класс Builder - закрузчик языка KV Lang
from kivy.lang import Builder
# Builder.load_file(str(Path(join(dirname(__file__), './AudioPlayer.kv'))))
# *****************************************************************************************
# Далее пишем разметку для прогручиваемого Label с сообщениями, пишем класс 
# ScrollableLabel и наследуем его от класса ScrollView
# *****************************************************************************************
# создаем класс ScrollableLabel и наследуем его от ScrollView
class ScrollableLabel(ScrollView):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    text = StringProrerty('')
    # ---------------------------------------------------------------------------

# пишем разметку kv language где настраиваем
# прокрутку Label где будут выводиться сообщения
Builder.load_string('''
<ScrollableLabel>:
    Label:
        text: root.text
        font_size: '18sp'
        text_size: (None, None)
        size_hint: (1, None)
        padding: 10, 20
        height: self.texture_size[1]
''')
# *****************************************************************************************
# Пишем класс ClientApp
# *****************************************************************************************
# создаем класс ClientApp
class ClientApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    # переменная сокета. пока присваиваем None
    s = None
    # булева переменная is_connect для определения 
    # подключен ли пользователь или нет
    is_connect = False
    # никнейм пользователя
    nick = None
    # в переменную host будем присваивать ip сервера
    host = None
    # в переменную port будем присваивать порт сервера
    port = None
    # ---------------------------------------------------------------------------
    # Далее в этом классе ClientApp пишем метод build 
    # который будет инициализировать все виджеты
    # ---------------------------------------------------------------------------
    def build(self):
        # создаем главный BaxLayout
        bl = BoxLayout(orientation='vertical')
        # создаем верхний BoxLayout где будет три TextInput
        # (никнейм, ip и порт) и кнопка подключения к серверу
        self.top_bl = BoxLayout(orientation='horizontal', size_hint=(1, 0.07))
        # создаем FloatLayout который будет по середине.
        # в него добавим список пользователей (Label) 
        # и список сообщений (Label)
        self.middle_fl = FloatLayout(size_hint=(1, 0.9))
        # создаем нижний BoxLayout где будет ввод
        # сообщения (TextInput) и кнопка отправить
        self.bottom_bl = BoxLayout(orientation='horizontal', size_hint=(1, 0.07))
        # Label для отображения списка пользователей
        self.user_label = Label(color=(0,0,0,1), 
                                size_hint=(None, None),
                                pos_hint={'x': 0.01,'y': 0.8},
                                halign='left',
                                valign='top'
                                )
        # рисуем для списка пользователей серый прямоугольник
        with self.user_label.canvas.before:
            Color(0.8, 0.8, 0.8, 1)
            Rectangle(pos_hint=self.user_label.pos_hint, size=(150, 560))
        # создаем TextInput для ввода имени (никнейма)
        self.nick_input = TextInput(multiline=False, 
                                    hint_text='Введите имя ...'
                                    )
        # создаем TextInput для ввода ip сервера
        self.host_input = TextInput(multiline=False, 
                                    hint_text='Введите IP адрес сервера ...'
                                    )
        # создаем TextInput для ввода порта сервера
        self.port_input = TextInput(multiline=False, 
                                    hint_text='Введите пор сервера ...'
                                    )
        # привязываем к каждому TextInput метод on_text
        # который будет написан позже
        self.nick_input.bind(text=self.on_text)
        self.host_input.bind(text=self.on_text)
        self.port_input.bind(text=self.on_text)
        # создаем кнопку подключиться к серверу и событию on_press
        # присваиваем connect_to_server который будет написан позже
        self.connect_btn = Button(text='Подключиться к серверу',
                                disabled=True,
                                on_press=self.connect_to_server
                                )
        # создаем прокручиваемый Label где будут выводиться сообщения
        self.chat_list = ScrollableLabel()
        # создаем TextInput для ввода сообщения и события on_text_validate
        # присваиваем метод send который напишем позже
        self.textinp = TextInput(multiline=False,
                                on_text_validate=self.send,
                                disabled=True)
        # создаем кнопку для отправки сообщения и событию on_press
        # присваиваем метод send который напишем позже
        self.btn = Button(text='Отправить',
                        on_press=self.send,
                        disabled=True) 
        # добавляем в верхний BoxLayout
        # три TextInput (никнейм, ip и порт)
        # и кнопка подключиться к серверу
        self.top_bl.add_widget(self.nick_input)
        self.top_bl.add_widget(self.host_input)
        self.top_bl.add_widget(self.port_input)
        self.top_bl.add_widget(self.connect_btn)
        # добавляем в средний FloatLayout список пользователей
        # и список сообщений
        self.middle_fl.add_widget(self.chat_list)
        self.middle_fl.add_widget(self.user_label)
        # добавляем в нижний BoxLayout TextInput для ввода
        # сообщения и кнопку отравить
        self.bottom_bl.add_widget(self.textinp)
        self.bottom_bl.add_widget(self.btn)
        # добавляем в главный Boxlayout верхний BoxLayout,
        # средний FloatLayout и нижний BoxLayout
        bl.add_widget(self.top_bl)
        bl.add_widget(self.middle_fl)
        bl.add_widget(self.bottom_bl)
        return bl
    # ---------------------------------------------------------------------------
    # Далее в этом же классе ClientApp пишем метод receive_message который 
    # будет принимать сообщения и список пользователей
    # ---------------------------------------------------------------------------
    # метод который принимает сообщения и список пользователей
    def receive_message(self):
        while True:
            # принимаем сообщение с серверного сокета
            data = self.s.recv(1024)
            # переводим из массива байт в текст
            data = data.decode('utf-8')
            # если в принятом сообщении есть [ то значит это список пользователей
            if '[' in data:
                # присваиваем в список пользователей пустую строку
                self.user_label.text = ''
                # разбираем список пользователей по запятой и присваиваем в users
                users = data[1 : -1].split(',')
                # проходимся по списку users и присваиваем пользователей в user.
                # label, то есть мы присвоили одного пользователя
                # и перенесли коретку на новую строку
                # и далее присваиваем второго пользователя и т.д.
                for us in users:
                    self.user_label.text += us + '\n'
            # если это не список пользователей тогда значит это сообщение
            else:
                # присваиваем это сообщение в список сообщений
                self.chat_list.text += data + '\n'
                # выводим в консоль сообщение просто для проверки
                print(data)
    # ---------------------------------------------------------------------------
    # Далее в этом же классе ClientApp пишем метод для отправки сообщения на сервер
    # ---------------------------------------------------------------------------
    # отправляем сообщение на сервер
    def send(self, event):
        # объединяем имя пользователя и сообщение
        mes = self.nick_input.text + ": " + self.textinp.text
        # кодируем в массив байт
        mes = mes.encode('utf-8')
        # отправляем с помощью метода send у сокета
        self.s.send(mes)
        # очищаем TextInput ввода сообщения
        self.textinp.text = ''
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    ClientApp().run()
# *****************************************************************************************
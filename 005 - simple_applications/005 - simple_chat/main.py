# *****************************************************************************************
# Простой чат
# *****************************************************************************************
# client.py - пользовательский интерфейс для общения в чате
# *****************************************************************************************
# Напишем простой чат. Напишем два файла python server.py и client.py.
# Файл server.py не будет иметь пользовательского интерфейса. 
# Это простой сервер который будет принимать подключения от клиентов и сообщения. 
# От клиента будет приходить сообщения на сервер а сервер перешлет 
# это сообщения всем подлкюченным клиентам.
# Файл client.py будет иметь пользовательский интерфейс который мы напишем на Kivy. 
# Мы будем использовать модуль socket. В server.py мы напишем сокет к которому 
# привяжем ip и port чтобы клиенту могли по этому ip и port подключаться. 
# Так же напишем чтобы сокет постоянно прослушивал входящие сообщения 
# от клиентов и отправлял их всем клиентам
# В client.py мы напишем чтобы сокет подключался по протоколу TCP и подключался 
# по тому ip и port который у сервера. И так же напишем чтобы этот же сокет 
# принимал сообщения от сервера и выводил их в Label с сообщениями. 
# Так же будут приходить от сервера сообщения кто подключился к чату 
# и кто вышел из чата
# Сначало напишем файл sever.py. 
# Импоритруем два модуля socket и threading
# *****************************************************************************************
# Теперь напишем файл client.py. В этом файле мы будем использовать Kivy. 
# Так же импортируем модули socket и threading
# *****************************************************************************************
# socket - работа с TCP/IP и сетью в целом
import socket
# threading - работа с потоками
import threading
# *****************************************************************************************
# Далее импортируем класс App и классы виджетов Kivy
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# коробочный макет
from kivy.uix.boxlayout import BoxLayout
# плавающий макет
from kivy.uix.floatlayout import FloatLayout
# текст
from kivy.uix.label import Label
# ввод текста
from kivy.uix.textinput import TextInput
# кнопка
from kivy.uix.button import Button
# *****************************************************************************************
# Далее импортируем из модуля graphics два класса Color и Rectangle. 
# Они нужны нам чтобы нарисовать прямоугольник заданного цвета.Мы будем рисовать 
# его где будет находиться Label со списком пользователей
# *****************************************************************************************
# импортируем класс Color (цвет) и Rectangle (прямоугольник).
# они нужны нам для того чтоы изменить цвет у области
# где будет Label списка пользователей
from kivy.graphics import Color, Rectangle
# *****************************************************************************************
# Импортируем виджет ScrollView для прокрутки Label c сообщениями. 
# Там же импортируем свойство для строк StringProperty
# *****************************************************************************************
# виджет для прокрутки
from kivy.uix.scrollview import ScrollView
# свойства объекта (виджета)
# ObjectProperty - свойство для оббъекта
# StringProrerty - свойство для строк
from kivy.properties import ObjectProperty, StringProrerty
# *****************************************************************************************
# И так же испортируем класс Builder из модуля lang для разметки 
# прокручиваемого Label с сообщениями
# *****************************************************************************************
# Работа с директориями и файлами ОС
from os.path import dirname, join
# Работа с директориями и файлами ОС
from pathlib import Path
# Класс Builder - закрузчик языка KV Lang
from kivy.lang import Builder
# Builder.load_file(str(Path(join(dirname(__file__), './AudioPlayer.kv'))))
# *****************************************************************************************
# Далее пишем разметку для прогручиваемого Label с сообщениями, пишем класс 
# ScrollableLabel и наследуем его от класса ScrollView
# *****************************************************************************************
# создаем класс ScrollableLabel и наследуем его от ScrollView
class ScrollableLabel(ScrollView):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    text = StringProrerty('')
    # ---------------------------------------------------------------------------

# пишем разметку kv language где настраиваем
# прокрутку Label где будут выводиться сообщения
Builder.load_string('''
<ScrollableLabel>:
    Label:
        text: root.text
        font_size: '18sp'
        text_size: (None, None)
        size_hint: (1, None)
        padding: 10, 20
        height: self.texture_size[1]
''')
# *****************************************************************************************
# Пишем класс ClientApp
# *****************************************************************************************
# создаем класс ClientApp
class ClientApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    # переменная сокета. пока присваиваем None
    s = None
    # булева переменная is_connect для определения 
    # подключен ли пользователь или нет
    is_connect = False
    # никнейм пользователя
    nick = None
    # в переменную host будем присваивать ip сервера
    host = None
    # в переменную port будем присваивать порт сервера
    port = None
    # ---------------------------------------------------------------------------
    # Далее в этом классе ClientApp пишем метод build 
    # который будет инициализировать все виджеты
    # ---------------------------------------------------------------------------
    def build(self):
        return None
    # ---------------------------------------------------------------------------










# *****************************************************************************************
class Chat(BoxLayout):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    # vars
    # ---------------------------------------------------------------------------
    # methods
    # ---------------------------------------------------------------------------
    pass
    # ---------------------------------------------------------------------------
    pass
    # ---------------------------------------------------------------------------
# *****************************************************************************************
class ChatApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    # vars
    # ---------------------------------------------------------------------------
    # methods
    # ---------------------------------------------------------------------------
    def build(self):
        return Chat()
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    ChatApp().run()
# *****************************************************************************************
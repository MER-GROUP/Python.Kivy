# *****************************************************************************************
# Простой аудио плеер
# *****************************************************************************************
# Создадим простой аудиоплеер. 

# Нам понадобятся дополнительно две библиотеки. 

# Первая эта easygui для отображения диалогового окна выбора файла. 
# Чтобы установить введите в терминале pip install easygui. 

# Вторая библиотека mutagen для того чтобы вычислить длительность трека. 
# Для установки введите в терминале pip install mutagen.

# Так же нам понадобится класс Timer из пакета threading для обновления 
# позиции ползунка у виджета Slider и для обновления времени в Label. 

# Для аудио нам понадобится класс SoundLoader из модуля kivy.core.audio.

# Вот какие виджеты нам понадобятся:

# 1. Виджет кнопки для загрузки аудиофайла. 
#    Будем загружать в формате mp3

# 2. Виджет Label где будем выводить путь к нашему файлу.

# 3. Виджет Slider для прокрутки трека. 
#    Так же при обновление позиции трека ползунок у слайдера будем двигаться.

# 4. Три виджета Label. 
#    Первый Label будет обновлять время когда будет обнолвяться позиция трека. 
#    Второй Label просто косая черта. 
#    Третий Label для вывода длитеьности всего трека.

# 5.Три кнопки Play, Pause, Stop. 
#   Кнопка Play для проигрывания, 
#   кнопка Pause для паузы трека, 
#   кнопка Stop для остановки трека

# Создадим два файла player.py для кода и player.kv для разметки. 

# Импортируем все нужные нам классы и модули. 

# Как я и писал нам нужна библиотека easygui и mutagen. 
# Импортируем класс MP3 из mutagen.mp3. 

# Так же мы будем задавать размер окна на этот раз с помощью 
# класса Window из модуля kivy.core.window
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# коробочный макет
from kivy.uix.boxlayout import BoxLayout
# свойства объекта (виджета)
from kivy.properties import ObjectProperty
# *****************************************************************************************
# работа с аудио
from kivy.core.audio import SoundLoader
# работа с настройками основного окна программы
from kivy.core.window import Window
# *****************************************************************************************
# поток таймер
# from threading import Timer as timer
from threading import Timer
# *****************************************************************************************
# конфигурация приложения kv
from kivy.config import Config
# задаем размеры окна статически
# Config.set('graphics', 'width', '400')
# Config.set('graphics', 'height', '500')
# *****************************************************************************************
# Работа с директориями и файлами ОС
from os.path import dirname, join
# Работа с директориями и файлами ОС
from pathlib import Path
# Класс Builder - закрузчик языка KV Lang
from kivy.lang import Builder
# Builder.load_file(str(Path(join(dirname(__file__), './calc.kv'))))
# *****************************************************************************************
# сторонние модули
# вызов виджетов из tkinder
import easygui
# работа с аудио файлами
from mutagen.mp3 import MP3
# *****************************************************************************************
# динамическое изменение основного окна
# Зададим размер окна 400x400 c помошью атрибута size у класса Window
Window.size = (400, 400)
# *****************************************************************************************
# Создадим класс PlayerExample который будет наследоваться от BoxLayout.
#  
# Создаем переменные как в разметке slider, filename, play, pause, stop, 
# time(виджет Label где будет обновляться текст времени), 
# all_time(виджет Label где будет отображаться общая длительность трека). 

# Так же создадим переменную music_file в неё мы будем присваивать путь 
# к файлу изначально она будет None, переменную sound с помощью которой 
# будем проигрывать и останавливать трек изначально она будет None, 
# перменную timer класса Timer изначально она будет None и переменную 
# seconds которой будет присваивать каждую секунду единицу при 
# проигрывание трека изначально будет равна 0.
# *****************************************************************************************
# Далее напишем метод load_music в этом классе.
# В разметке присвоем этот метод событию on_press кнопки загузки(она будет называться Load). 
# При нажатии на кнопку будет появляться диалоговое окно с выбором файла 
# и после это загрузим его в переменную sound. 

# Итак:
# 1. Проверяем условие если timer не равен None то останавливаем timer 
#    с помощью timer.cancel()
# 2. Присваиваем переменной music_file путь к файлу. Мы выберем файл 
#    в диалоговом окне и присвоем путь к файлу с помощью 
#    easygui.fileopenbox(filetypes=["*.mp3"])
# 3. Далее проверяем условие если переменная sound не равна None то 
#    вызываем метод stop_music который создадим позже. Присваиваем переменной 
#    seconds значение 0.Виджету Label которыей будет обновлять позицию 
#    трека присвоем "00:00"
# 4. Проверяем условие если переменная music_file равна None то 
#    переменной filename присваиваем текст "No loaded song", переменной 
#    all_time присвоем "00:00". В этом же условие напишем если timer 
#    не равен None то останавливаем timer с помощью timer.cancel(). 
#    И в этом же условии(if self.music_file == None) перменной 
#    кнопки play атрибуту disabled присваиваем True(отключаем кнопку).
#    В этом же условии пишем оператор return
# 5. Переменной sound присваиваем загруженный трек с помощью SoundLoader.
#    load(self.music_file)
# 6. Создаем переменную audio и присвоем ей информацию о файл с помощью 
#    класса MP3 из модуля mutagen.mp3 в качестве параметра передадим 
#    путь к файлу(переменная music_file)
# 7. Переведем размер трека в минуты и секунды создадим 
#    переменные m и s и присвоем метод divmod где в качестве первого 
#    параметра будет audio.info.length + 1(единицу прибавляем для точного времени),
#    а второго значение 60
# 8. Приводим отображение времени к формату "минуты:секунды". 
#    Содадим переменную t и присвоем ей "%02d:%02d" % (m,s)
# 9. Присваиваем переменную t переменной all_time
# 10. Присвоем виджету Slider максимальное значение. Максимальное 
#     значение будет длительность загруженного трека. 
#     Пишем self.slider.max = int(audio.info.length)
# 11. Значение самого ползунка ставим 0. Пишем self.slider.value = 0
# 12. Поставим позицию трека в 0 для этого пишем self.sound.seek(0). 
#     Именно с помощью метода seek можно установить позицию трека.
# 13. Останавливаем проигрывания трека пишем self.sound.stop()
# 14. Включаем кнопку play c помошью атрибута disabled ставим False15.
#     Переменной timer присваиваем класс Timer в качестве первого параметра 
#     будет время через которое сработает timer. У нас будет одна секунда. 
#     Вторым параметром пишем метод position которые будет обновлять 
#     позицию slider и обновлять текст виджет Label где отображаться 
#     в секундах позиция трека. Напишем метод position позже
# 15. Переменной filename присвоем текст пути к файлу. 
#     Для этого пишем self.filename.text = self.sound.source
# *****************************************************************************************
# Далее пишем метод play_music который присвоем событию on_press кнопки Play. 
# Итак пишем:
# 1.Отключаем кнопку play с помощью атрибута disabled ставим True
# 2.Включаем кнопку pause с помощью атрибута disabled ставим False
# 3.Включаем кнопку stop с помощью атрибута disabled ставим False
# 4.Запускаем проигрывания трека. Пишем self.sound.play()
# 5.Запускаем timer. Пишем self.timer.start()
# *****************************************************************************************
class AudioPlayer(BoxLayout):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    # vars
    slider = ObjectProperty(None)
    filename = ObjectProperty(None)
    play = ObjectProperty(None)
    pause = ObjectProperty(None)
    stop = ObjectProperty(None)
    time = ObjectProperty(None)
    all_time = ObjectProperty(None)
    music_file = None
    sound = None
    timer = None
    seconds = int()
    # ---------------------------------------------------------------------------
    # methods
    # ---------------------------------------------------------------------------
    def load_music(self):
        if not (None == self.timer):
            self.timer.cancel()

        self.music_file = easygui.fileopenbox(filetypes=['*.mp3'])

        if not (None == self.sound):
            self.stop_music()
            self.seconds = int()
            self.time.text = '00:00'

        if (None == self.music_file):
            self.filename.text = 'No loading song'
            self.all_time.text = '00:00'
            if not (None == self.timer):
                self.timer.cancel()
            self.play.disabled = True
            return

        self.sound = SoundLoader.load(self.music_file)
        audio = MP3(self.music_file)
        m, s = divmod(audio.info.length + 1, 60)
        t = '%02d:%02d' % (m, s)
        self.all_time.text = t
        self.slider.max = int(audio.info.length)
        self.slider.value = int()
        self.sound.seek(0)
        self.sound.stop()
        self.play.disabled = False
        self.timer = Timer(1, self.position)
        self.filename.text = self.sound.source
    # ---------------------------------------------------------------------------
    def play_music(self):
        self.play.disabled = True
        self.pause.disabled = False
        self.stop.disabled = False
        self.sound.play()
        self.timer.start()
    # ---------------------------------------------------------------------------
    pass
    # ---------------------------------------------------------------------------
# *****************************************************************************************
class AudioPlayerApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    def build(self):
        return AudioPlayer()
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    AudioPlayerApp().run()
# *****************************************************************************************
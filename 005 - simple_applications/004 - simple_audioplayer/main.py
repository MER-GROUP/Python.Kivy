# *****************************************************************************************
# Простой аудио плеер
# *****************************************************************************************
# Создадим простой аудиоплеер. 

# Нам понадобятся дополнительно две библиотеки. 

# Первая эта easygui для отображения диалогового окна выбора файла. 
# Чтобы установить введите в терминале pip install easygui. 

# Вторая библиотека mutagen для того чтобы вычислить длительность трека. 
# Для установки введите в терминале pip install mutagen.

# Так же нам понадобится класс Timer из пакета threading для обновления 
# позиции ползунка у виджета Slider и для обновления времени в Label. 

# Для аудио нам понадобится класс SoundLoader из модуля kivy.core.audio.

# Вот какие виджеты нам понадобятся:

# 1. Виджет кнопки для загрузки аудиофайла. 
#    Будем загружать в формате mp3

# 2. Виджет Label где будем выводить путь к нашему файлу.

# 3. Виджет Slider для прокрутки трека. 
#    Так же при обновление позиции трека ползунок у слайдера будем двигаться.

# 4. Три виджета Label. 
#    Первый Label будет обновлять время когда будет обнолвяться позиция трека. 
#    Второй Label просто косая черта. 
#    Третий Label для вывода длитеьности всего трека.

# 5.Три кнопки Play, Pause, Stop. 
#   Кнопка Play для проигрывания, 
#   кнопка Pause для паузы трека, 
#   кнопка Stop для остановки трека

# Создадим два файла player.py для кода и player.kv для разметки. 

# Импортируем все нужные нам классы и модули. 

# Как я и писал нам нужна библиотека easygui и mutagen. 
# Импортируем класс MP3 из mutagen.mp3. 

# Так же мы будем задавать размер окна на этот раз с помощью 
# класса Window из модуля kivy.core.window
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# коробочный макет
from kivy.uix.boxlayout import BoxLayout
# свойства объекта (виджета)
from kivy.properties import ObjectProperty
# *****************************************************************************************
# работа с аудио
from kivy.core.audio import SoundLoader
# работа с настройками основного окна программы
from kivy.core.window import Window
# *****************************************************************************************
# поток таймер
# from threading import Timer as timer
from threading import Timer
# *****************************************************************************************
# конфигурация приложения kv
from kivy.config import Config
# задаем размеры окна статически
# Config.set('graphics', 'width', '400')
# Config.set('graphics', 'height', '500')
# *****************************************************************************************
# Работа с директориями и файлами ОС
from os.path import dirname, join
# Работа с директориями и файлами ОС
from pathlib import Path
# Класс Builder - закрузчик языка KV Lang
from kivy.lang import Builder
# Builder.load_file(str(Path(join(dirname(__file__), './calc.kv'))))
# *****************************************************************************************
# сторонние модули
# вызов виджетов из tkinder
import easygui
# работа с аудио файлами
from mutagen.mp3 import MP3
# *****************************************************************************************
# динамическое изменение основного окна
# Зададим размер окна 400x400 c помошью атрибута size у класса Window
Window.size = (400, 400)
# *****************************************************************************************
# Создадим класс PlayerExample который будет наследоваться от BoxLayout.
#  
# Создаем переменные как в разметке slider, filename, play, pause, stop, 
# time(виджет Label где будет обновляться текст времени), 
# all_time(виджет Label где будет отображаться общая длительность трека). 

# Так же создадим переменную music_file в неё мы будем присваивать путь 
# к файлу изначально она будет None, переменную sound с помощью которой 
# будем проигрывать и останавливать трек изначально она будет None, 
# перменную timer класса Timer изначально она будет None и переменную 
# seconds которой будет присваивать каждую секунду единицу при 
# проигрывание трека изначально будет равна 0.
# *****************************************************************************************
class AudioPlayer(BoxLayout):
    # ---------------------------------------------------------------------------
    '''root widget'''
    # ---------------------------------------------------------------------------
    # vars
    slider = ObjectProperty(None)
    filename = ObjectProperty(None)
    play = ObjectProperty(None)
    pause = ObjectProperty(None)
    stop = ObjectProperty(None)
    time = ObjectProperty(None)
    all_time = ObjectProperty(None)
    music_file = None
    sound = None
    timer = None
    seconds = int()
    # ---------------------------------------------------------------------------
    # methods
    pass
    # ---------------------------------------------------------------------------
    pass
    # ---------------------------------------------------------------------------
# *****************************************************************************************
class AudioPlayerApp(App):
    # ---------------------------------------------------------------------------
    '''app widget'''
    # ---------------------------------------------------------------------------
    def build(self):
        return AudioPlayer()
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    AudioPlayerApp().run()
# *****************************************************************************************
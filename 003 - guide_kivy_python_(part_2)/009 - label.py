# *****************************************************************************************
# Label
# Модуль: kivy.uix.label

# Label - виджет для отображения текста.Он поддерживает строки "ascii" и "unicode".

# Атрибуты
# text - текст для отображения.
# font_name - название шрифта.
# font_size - размер шрифта.
# halign - горизонтальное выравнивание текста. 
    # Принимает одно из значений: "auto", "left", "center", "right", "justfy".
# valign - вертикальное выравнивание текста. 
    # Принимает одно из значений: "botton", "middle", "top".
# italic - указывает на использование курсивной версии вашего 
    # шрифта если равен "True". По умолчанию "False".
# bold - указывает на использование жирной версии вашего шрифта 
    # если равен "True". По умолчанию "False".
# line_height - высота строки у текста .Например, line_height = 2 приведет к тому, 
    # что расстояние между строками будет в два раза больше.
# markup - если значение "True", то для текста можно установить 
    # разметку ("[color=ffffff]text[/color]"). По умолчанию "False".
# max_lines - максимальное количество строк. По умолчанию 0, 
    # что означает неограниченное количество строк.
# outline_color - цвет контура текста в формате (r,g,b). По умолчанию "[0,0,0]"
# outline_width - ширина в пикселях для контура вокруг текста. 
    # Контур не будет отображаться, если значение равно "None". 
    # По умолчанию "None"
# padding - внутренние отступы в формате "(padding_x,padding_y)". 
    # Так же можно отдельно присваивать padding_x и padding_y.
# strikethrough - если значение "True" добавляет зачеркнутую строку к тексту. 
    # По умолчанию "False".
# strip - если значение "True" убирает пробелы вначале и в конце. 
    # По умолчанию "False".
# text_size - ограничивает размер текста принимает в качетсве значения кортеж. 
    # По умолчанию "(None,None)".
# underline - если значение "True", добавляет подчеркивание к тексту. 
    # По умолчанию "False".

# Теги для разметки текста

# Доступны следующие теги:
# [b][/b] - жирный шрифт текста.
# [i][/i] - курсивный шрифт текста.
# [u][/u] - подчеркнутый текст.
# [s][/s] - зачеркнутый текст.
# [font=<str>][/font] - изменить шрифт (примечание: это относится к файлу TTF 
    # или зарегистрированному псевдониму).
# [font_context=<str>][/font_context] - Измените контекст для шрифта, 
    # используйте строковое значение «none» для изолированного контекста 
    # (это эквивалентно None. Если вы создали контекст шрифта с именем «none» , 
    # на него нельзя ссылаться с использованием разметки).
# [font_family=<str>][/font_family] - cемейство шрифтов для текста в этом теге. 
    # Это действительно только при использовании контекста шрифта.
# [font_features=<str>][/font_features] - Особенности шрифта OpenType в 
    # формате CSS передаются в Pango. Эффект запроса функции зависит 
    # от загруженных шрифтов, версий библиотеки и т. Д. Только для Pango, 
    # требуется версия 1.38 или новее.
# [size=<integer>][/size] - изменить размер шрифта.
# [color=#<color>][/color] - изменить цвет текста.
# [sub][/sub] - отображает текст маленьком шрифтом внизу. Например 28
# [sup][/sup] - отображает текст в верхнем индексе относительно текста перед ним. Например 28
# [text_language=<str>][/text_language] - язык текста, это языковой тег 
    # формата RFC-3066 (в виде строки), например «en_US», «zh_CN», «fr» или «ja».

# Если вы хотите визуализировать текст разметки с помощью символа [ или ] или &, 
    # вам нужно экранировать их:
    # [ -> &bl;
    # ] -> &br;
    # & -> &
    # Тогда вы можете написать:
    # "[size=24]Hello &bl;World&br;[/size]"
    
# Пример
# Создадим Label и выведем текст "Hello Kivy". 
# Расположим по центру и с помощью разметки, слово "Hello" выделим красным, 
# а "Kivy" зеленым. Незабываем для разметки текста атрибут markup ставить в "True":
# *****************************************************************************************
# главное окно программы
from kivy.app import App
# виджет - текст (этикетка)
from kivy.uix.label import Label
# *****************************************************************************************
# окно программы
class LabelApp(App):
    # ---------------------------------------------------------------------------
    def build(self):
        label = Label(text='[color=ff0000]Hello[/color] [color=00ff00]Kivy[/color]', 
                    font_size='50sp',
                    halign='center',
                    valign='middle',
                    markup=True)
        return label
    # ---------------------------------------------------------------------------
# *****************************************************************************************
# запуск программы
if __name__ == '__main__':
    LabelApp().run()
# *****************************************************************************************